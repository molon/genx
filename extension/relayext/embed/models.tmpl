package model

import (
	"time"

	"github.com/pkg/errors"
	"github.com/theplant/relay"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type PageInfo = relay.PageInfo
{{- range $n := .Nodes }}

type {{ $n.Name }} struct {
	{{- range $f := $n.Fields }}
	{{ $f.GoName }} {{ $f.GoType | typeString }} {{ if $f.GoTag }}`{{ $f.GoTag }}`{{ end }}
	{{- end }}
}

type (
	{{ $n.Name }}Edge       = relay.Edge[*{{ $n.Name }}]
	{{ $n.Name }}Connection = relay.Connection[*{{ $n.Name }}]
)

{{- end }}

func AutoMigrate(dsn string) error {
	if dsn == "" {
		return errors.New("database.dsn is required")
	}

	db, err := gorm.Open(postgres.New(postgres.Config{DSN: dsn}), &gorm.Config{
		DisableForeignKeyConstraintWhenMigrating: true,
	})
	if err != nil {
		return errors.Wrap(err, "failed to open database connection")
	}

	if err := db.AutoMigrate({{ range $n := .Nodes }}&{{$n.Name}}{}, {{ end }}); err != nil {
		return err
	}

	sqlDB, err := db.DB()
	if err != nil {
		return errors.Wrap(err, "failed to get database connection")
	}
	if err := sqlDB.Close(); err != nil {
		return errors.Wrap(err, "failed to close database connection")
	}
	return nil
}
