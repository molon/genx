package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/molon/genx/pkg/gqlx"
	"github.com/molon/genx/starter/boilerplate/server/exec"
	"github.com/molon/genx/starter/boilerplate/server/model"
	"github.com/theplant/relay"
)

// Employees is the resolver for the employees field.
func (r *companyGQLResolver) Employees(ctx context.Context, obj *model.Company, after *string, first *int, before *string, last *int, filterBy *model.UserFilter, orderBy []*model.UserOrder) (*relay.Connection[*model.User], error) {
	return r.Resolver.Company.Employees(ctx, obj, after, first, before, last, filterBy, orderBy)
}

// ViewerPermission is the resolver for the viewerPermission field.
func (r *companyGQLResolver) ViewerPermission(ctx context.Context, obj *model.Company) (*model.CompanyViewerPermission, error) {
	return r.Resolver.Company.ViewerPermission(ctx, obj)
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationGQLResolver) CreateCompany(ctx context.Context, input model.CreateCompanyInput) (*model.CreateCompanyPayload, error) {
	return r.Resolver.Company.Create(ctx, input)
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationGQLResolver) UpdateCompany(ctx context.Context, input model.UpdateCompanyInput) (*model.UpdateCompanyPayload, error) {
	inputFields, _ := gqlx.CollectArgumentFields(ctx)["input"].(map[string]any)
	return r.Resolver.Company.Update(ctx, input, inputFields)
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationGQLResolver) DeleteCompany(ctx context.Context, input model.DeleteCompanyInput) (*model.DeleteCompanyPayload, error) {
	return r.Resolver.Company.Delete(ctx, input)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationGQLResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserPayload, error) {
	return r.Resolver.User.Create(ctx, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationGQLResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.UpdateUserPayload, error) {
	inputFields, _ := gqlx.CollectArgumentFields(ctx)["input"].(map[string]any)
	return r.Resolver.User.Update(ctx, input, inputFields)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationGQLResolver) DeleteUser(ctx context.Context, input model.DeleteUserInput) (*model.DeleteUserPayload, error) {
	return r.Resolver.User.Delete(ctx, input)
}

// CreateTask is the resolver for the createTask field.
func (r *mutationGQLResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.CreateTaskPayload, error) {
	return r.Resolver.Task.Create(ctx, input)
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationGQLResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*model.UpdateTaskPayload, error) {
	inputFields, _ := gqlx.CollectArgumentFields(ctx)["input"].(map[string]any)
	return r.Resolver.Task.Update(ctx, input, inputFields)
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationGQLResolver) DeleteTask(ctx context.Context, input model.DeleteTaskInput) (*model.DeleteTaskPayload, error) {
	return r.Resolver.Task.Delete(ctx, input)
}

// Companies is the resolver for the companies field.
func (r *queryGQLResolver) Companies(ctx context.Context, after *string, first *int, before *string, last *int, filterBy *model.CompanyFilter, orderBy []*model.CompanyOrder) (*relay.Connection[*model.Company], error) {
	return r.Resolver.Company.List(ctx, after, first, before, last, filterBy, orderBy)
}

// Users is the resolver for the users field.
func (r *queryGQLResolver) Users(ctx context.Context, after *string, first *int, before *string, last *int, filterBy *model.UserFilter, orderBy []*model.UserOrder) (*relay.Connection[*model.User], error) {
	return r.Resolver.User.List(ctx, after, first, before, last, filterBy, orderBy)
}

// Tasks is the resolver for the tasks field.
func (r *queryGQLResolver) Tasks(ctx context.Context, after *string, first *int, before *string, last *int, filterBy *model.TaskFilter, orderBy []*model.TaskOrder) (*relay.Connection[*model.Task], error) {
	return r.Resolver.Task.List(ctx, after, first, before, last, filterBy, orderBy)
}

// Assignee is the resolver for the assignee field.
func (r *taskGQLResolver) Assignee(ctx context.Context, obj *model.Task) (*model.User, error) {
	return r.Resolver.Task.Assignee(ctx, obj)
}

// ViewerPermission is the resolver for the viewerPermission field.
func (r *taskGQLResolver) ViewerPermission(ctx context.Context, obj *model.Task) (*model.TaskViewerPermission, error) {
	return r.Resolver.Task.ViewerPermission(ctx, obj)
}

// Company is the resolver for the company field.
func (r *userGQLResolver) Company(ctx context.Context, obj *model.User) (*model.Company, error) {
	return r.Resolver.User.Company(ctx, obj)
}

// Tasks is the resolver for the tasks field.
func (r *userGQLResolver) Tasks(ctx context.Context, obj *model.User, after *string, first *int, before *string, last *int, filterBy *model.TaskFilter, orderBy []*model.TaskOrder) (*relay.Connection[*model.Task], error) {
	return r.Resolver.User.Tasks(ctx, obj, after, first, before, last, filterBy, orderBy)
}

// ViewerPermission is the resolver for the viewerPermission field.
func (r *userGQLResolver) ViewerPermission(ctx context.Context, obj *model.User) (*model.UserViewerPermission, error) {
	return r.Resolver.User.ViewerPermission(ctx, obj)
}

// Company returns exec.CompanyResolver implementation.
func (r *GQLResolver) Company() exec.CompanyResolver { return &companyGQLResolver{r} }

// Mutation returns exec.MutationResolver implementation.
func (r *GQLResolver) Mutation() exec.MutationResolver { return &mutationGQLResolver{r} }

// Query returns exec.QueryResolver implementation.
func (r *GQLResolver) Query() exec.QueryResolver { return &queryGQLResolver{r} }

// Task returns exec.TaskResolver implementation.
func (r *GQLResolver) Task() exec.TaskResolver { return &taskGQLResolver{r} }

// User returns exec.UserResolver implementation.
func (r *GQLResolver) User() exec.UserResolver { return &userGQLResolver{r} }

type (
	companyGQLResolver  struct{ *GQLResolver }
	mutationGQLResolver struct{ *GQLResolver }
	queryGQLResolver    struct{ *GQLResolver }
	taskGQLResolver     struct{ *GQLResolver }
	userGQLResolver     struct{ *GQLResolver }
)
