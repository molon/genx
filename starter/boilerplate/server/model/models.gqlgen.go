// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooleanFilter struct {
	Equals *string `json:"equals,omitempty"`
	Not    *string `json:"not,omitempty"`
	IsNull *bool   `json:"isNull,omitempty"`
}

type CompanyFilter struct {
	Not         *CompanyFilter   `json:"not,omitempty"`
	And         []*CompanyFilter `json:"and,omitempty"`
	Or          []*CompanyFilter `json:"or,omitempty"`
	ID          *IDFilter        `json:"id,omitempty"`
	CreatedAt   *TimeFilter      `json:"createdAt,omitempty"`
	UpdatedAt   *TimeFilter      `json:"updatedAt,omitempty"`
	Name        *StringFilter    `json:"name,omitempty"`
	Description *StringFilter    `json:"description,omitempty"`
}

type CompanyOrder struct {
	Field     CompanyOrderField `json:"field"`
	Direction OrderDirection    `json:"direction"`
}

type CompanyViewerPermission struct {
	CanCreate bool `json:"canCreate"`
	CanUpdate bool `json:"canUpdate"`
	CanDelete bool `json:"canDelete"`
}

type CreateCompanyInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Name             string  `json:"name"`
	Description      *string `json:"description,omitempty"`
}

type CreateCompanyPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Company          *Company `json:"company"`
}

type CreateTaskInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	Title            string     `json:"title"`
	Description      *string    `json:"description,omitempty"`
	Status           TaskStatus `json:"status"`
	AssigneeID       *string    `json:"assigneeId,omitempty"`
}

type CreateTaskPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Task             *Task   `json:"task"`
}

type CreateUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Name             string  `json:"name"`
	Description      *string `json:"description,omitempty"`
	Age              int     `json:"age"`
	CompanyID        string  `json:"companyId"`
}

type CreateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type DeleteCompanyInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	CompanyID        string  `json:"companyId"`
}

type DeleteCompanyPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Company          *Company `json:"company"`
}

type DeleteTaskInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	TaskID           string  `json:"taskId"`
}

type DeleteTaskPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Task             *Task   `json:"task"`
}

type DeleteUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	UserID           string  `json:"userId"`
}

type DeleteUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type EnumFilter struct {
	Equals *string  `json:"equals,omitempty"`
	Not    *string  `json:"not,omitempty"`
	In     []string `json:"in,omitempty"`
	NotIn  []string `json:"notIn,omitempty"`
	IsNull *bool    `json:"isNull,omitempty"`
}

type FloatFilter struct {
	Equals *string  `json:"equals,omitempty"`
	Not    *string  `json:"not,omitempty"`
	In     []string `json:"in,omitempty"`
	NotIn  []string `json:"notIn,omitempty"`
	Lt     *string  `json:"lt,omitempty"`
	Lte    *string  `json:"lte,omitempty"`
	Gt     *string  `json:"gt,omitempty"`
	Gte    *string  `json:"gte,omitempty"`
	IsNull *bool    `json:"isNull,omitempty"`
}

type IDFilter struct {
	Equals     *string  `json:"equals,omitempty"`
	Not        *string  `json:"not,omitempty"`
	In         []string `json:"in,omitempty"`
	NotIn      []string `json:"notIn,omitempty"`
	Lt         *string  `json:"lt,omitempty"`
	Lte        *string  `json:"lte,omitempty"`
	Gt         *string  `json:"gt,omitempty"`
	Gte        *string  `json:"gte,omitempty"`
	Contains   *string  `json:"contains,omitempty"`
	StartsWith *string  `json:"startsWith,omitempty"`
	EndsWith   *string  `json:"endsWith,omitempty"`
	IsNull     *bool    `json:"isNull,omitempty"`
	Fold       *bool    `json:"fold,omitempty"`
}

type IntFilter struct {
	Equals *string  `json:"equals,omitempty"`
	Not    *string  `json:"not,omitempty"`
	In     []string `json:"in,omitempty"`
	NotIn  []string `json:"notIn,omitempty"`
	Lt     *string  `json:"lt,omitempty"`
	Lte    *string  `json:"lte,omitempty"`
	Gt     *string  `json:"gt,omitempty"`
	Gte    *string  `json:"gte,omitempty"`
	IsNull *bool    `json:"isNull,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type StringFilter struct {
	Equals     *string  `json:"equals,omitempty"`
	Not        *string  `json:"not,omitempty"`
	In         []string `json:"in,omitempty"`
	NotIn      []string `json:"notIn,omitempty"`
	Lt         *string  `json:"lt,omitempty"`
	Lte        *string  `json:"lte,omitempty"`
	Gt         *string  `json:"gt,omitempty"`
	Gte        *string  `json:"gte,omitempty"`
	Contains   *string  `json:"contains,omitempty"`
	StartsWith *string  `json:"startsWith,omitempty"`
	EndsWith   *string  `json:"endsWith,omitempty"`
	IsNull     *bool    `json:"isNull,omitempty"`
	Fold       *bool    `json:"fold,omitempty"`
}

type TaskFilter struct {
	Not         *TaskFilter   `json:"not,omitempty"`
	And         []*TaskFilter `json:"and,omitempty"`
	Or          []*TaskFilter `json:"or,omitempty"`
	ID          *IDFilter     `json:"id,omitempty"`
	CreatedAt   *TimeFilter   `json:"createdAt,omitempty"`
	UpdatedAt   *TimeFilter   `json:"updatedAt,omitempty"`
	Title       *StringFilter `json:"title,omitempty"`
	Description *StringFilter `json:"description,omitempty"`
	Status      *EnumFilter   `json:"status,omitempty"`
	Assignee    *UserFilter   `json:"assignee,omitempty"`
}

type TaskOrder struct {
	Field     TaskOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type TaskViewerPermission struct {
	CanCreate bool `json:"canCreate"`
	CanUpdate bool `json:"canUpdate"`
	CanDelete bool `json:"canDelete"`
}

type TimeFilter struct {
	Equals *string  `json:"equals,omitempty"`
	Not    *string  `json:"not,omitempty"`
	In     []string `json:"in,omitempty"`
	NotIn  []string `json:"notIn,omitempty"`
	Lt     *string  `json:"lt,omitempty"`
	Lte    *string  `json:"lte,omitempty"`
	Gt     *string  `json:"gt,omitempty"`
	Gte    *string  `json:"gte,omitempty"`
	IsNull *bool    `json:"isNull,omitempty"`
}

type UpdateCompanyInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	CompanyID        string  `json:"companyId"`
	Name             *string `json:"name,omitempty"`
	Description      *string `json:"description,omitempty"`
}

type UpdateCompanyPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Company          *Company `json:"company"`
}

type UpdateTaskInput struct {
	ClientMutationID *string     `json:"clientMutationId,omitempty"`
	TaskID           string      `json:"taskId"`
	Title            *string     `json:"title,omitempty"`
	Description      *string     `json:"description,omitempty"`
	Status           *TaskStatus `json:"status,omitempty"`
	AssigneeID       *string     `json:"assigneeId,omitempty"`
}

type UpdateTaskPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Task             *Task   `json:"task"`
}

type UpdateUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	UserID           string  `json:"userId"`
	Name             *string `json:"name,omitempty"`
	Description      *string `json:"description,omitempty"`
	Age              *int    `json:"age,omitempty"`
	CompanyID        *string `json:"companyId,omitempty"`
}

type UpdateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type UserFilter struct {
	Not         *UserFilter    `json:"not,omitempty"`
	And         []*UserFilter  `json:"and,omitempty"`
	Or          []*UserFilter  `json:"or,omitempty"`
	ID          *IDFilter      `json:"id,omitempty"`
	CreatedAt   *TimeFilter    `json:"createdAt,omitempty"`
	UpdatedAt   *TimeFilter    `json:"updatedAt,omitempty"`
	Name        *StringFilter  `json:"name,omitempty"`
	Description *StringFilter  `json:"description,omitempty"`
	Age         *IntFilter     `json:"age,omitempty"`
	Company     *CompanyFilter `json:"company,omitempty"`
}

type UserOrder struct {
	Field     UserOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type UserViewerPermission struct {
	CanCreate bool `json:"canCreate"`
	CanUpdate bool `json:"canUpdate"`
	CanDelete bool `json:"canDelete"`
}

type CompanyOrderField string

const (
	CompanyOrderFieldID          CompanyOrderField = "ID"
	CompanyOrderFieldCreatedAt   CompanyOrderField = "CREATED_AT"
	CompanyOrderFieldUpdatedAt   CompanyOrderField = "UPDATED_AT"
	CompanyOrderFieldName        CompanyOrderField = "NAME"
	CompanyOrderFieldDescription CompanyOrderField = "DESCRIPTION"
)

var AllCompanyOrderField = []CompanyOrderField{
	CompanyOrderFieldID,
	CompanyOrderFieldCreatedAt,
	CompanyOrderFieldUpdatedAt,
	CompanyOrderFieldName,
	CompanyOrderFieldDescription,
}

func (e CompanyOrderField) IsValid() bool {
	switch e {
	case CompanyOrderFieldID, CompanyOrderFieldCreatedAt, CompanyOrderFieldUpdatedAt, CompanyOrderFieldName, CompanyOrderFieldDescription:
		return true
	}
	return false
}

func (e CompanyOrderField) String() string {
	return string(e)
}

func (e *CompanyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyOrderField", str)
	}
	return nil
}

func (e CompanyOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskOrderField string

const (
	TaskOrderFieldID          TaskOrderField = "ID"
	TaskOrderFieldCreatedAt   TaskOrderField = "CREATED_AT"
	TaskOrderFieldUpdatedAt   TaskOrderField = "UPDATED_AT"
	TaskOrderFieldTitle       TaskOrderField = "TITLE"
	TaskOrderFieldDescription TaskOrderField = "DESCRIPTION"
	TaskOrderFieldStatus      TaskOrderField = "STATUS"
)

var AllTaskOrderField = []TaskOrderField{
	TaskOrderFieldID,
	TaskOrderFieldCreatedAt,
	TaskOrderFieldUpdatedAt,
	TaskOrderFieldTitle,
	TaskOrderFieldDescription,
	TaskOrderFieldStatus,
}

func (e TaskOrderField) IsValid() bool {
	switch e {
	case TaskOrderFieldID, TaskOrderFieldCreatedAt, TaskOrderFieldUpdatedAt, TaskOrderFieldTitle, TaskOrderFieldDescription, TaskOrderFieldStatus:
		return true
	}
	return false
}

func (e TaskOrderField) String() string {
	return string(e)
}

func (e *TaskOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskOrderField", str)
	}
	return nil
}

func (e TaskOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusOpen       TaskStatus = "OPEN"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusDone       TaskStatus = "DONE"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusOpen,
	TaskStatusInProgress,
	TaskStatusDone,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusOpen, TaskStatusInProgress, TaskStatusDone:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserOrderField string

const (
	UserOrderFieldID          UserOrderField = "ID"
	UserOrderFieldCreatedAt   UserOrderField = "CREATED_AT"
	UserOrderFieldUpdatedAt   UserOrderField = "UPDATED_AT"
	UserOrderFieldName        UserOrderField = "NAME"
	UserOrderFieldDescription UserOrderField = "DESCRIPTION"
	UserOrderFieldAge         UserOrderField = "AGE"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldID,
	UserOrderFieldCreatedAt,
	UserOrderFieldUpdatedAt,
	UserOrderFieldName,
	UserOrderFieldDescription,
	UserOrderFieldAge,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldID, UserOrderFieldCreatedAt, UserOrderFieldUpdatedAt, UserOrderFieldName, UserOrderFieldDescription, UserOrderFieldAge:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
